name: Terraform Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  find_dirs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find_dirs.outputs.matrix }}
      has_dirs: ${{ steps.find_dirs.outputs.has_dirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find Terraform environment directories
        id: find_dirs
        run: |
          set -e
          # Find top-level directories with .tf files, excluding _modules
          TF_DIRS=$(find . -maxdepth 1 -type d -not -path '.' -not -path './_modules' -not -path './_modules/*' | sort)
          echo "Found directories: $TF_DIRS"
          if [ -z "$TF_DIRS" ]; then
            echo "No Terraform environment directories found."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has_dirs=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          VALID_DIRS=""
          JSON_MATRIX="["
          for dir in $TF_DIRS; do
            dir_path="${dir#./}"
            if [ ! -d "$dir" ]; then
              echo "Skipping $dir_path: directory does not exist"
              continue
            fi
            if ls "$dir"/*.tf >/dev/null 2>&1; then
              VALID_DIRS="$VALID_DIRS $dir_path"
              JSON_MATRIX+="{\"directoryPath\":\"$dir_path\"},"
              echo "Valid directory: $dir_path"
            else
              echo "Skipping $dir_path: no .tf files found"
            fi
          done
          JSON_MATRIX=${JSON_MATRIX%,}
          JSON_MATRIX+="]"
          if [ -z "$VALID_DIRS" ]; then
            echo "No valid Terraform environment directories found."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has_dirs=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Valid Terraform directories: $VALID_DIRS"
          echo "Matrix JSON: $JSON_MATRIX"
          echo "matrix=$JSON_MATRIX" >> $GITHUB_OUTPUT
          echo "has_dirs=true" >> $GITHUB_OUTPUT
        shell: bash

  check_changes:
    runs-on: ubuntu-latest
    needs: find_dirs
    outputs:
      matrix: ${{ steps.detect_changes.outputs.matrix }}
      has_changes: ${{ steps.detect_changes.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch origin/main
        run: git fetch origin main

      - name: Detect Terraform changes
        id: detect_changes
        run: |
          set -e
          # Always plan all valid dirs on first push or manual dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ github.run_number }}" = "1" ]; then
            echo "Initial run or manual dispatch, planning all environments."
            JSON_MATRIX="${{ needs.find_dirs.outputs.matrix }}"
            echo "Valid directories (initial run): $(echo "$JSON_MATRIX" | jq -r '.[].directoryPath')"
            echo "matrix=$JSON_MATRIX" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          # Detect changes
          CHANGED_FILES=$(git diff origin/main HEAD --name-only -- '*.tf' || true)
          echo "Changed files: $CHANGED_FILES"
          MODULES_CHANGED=$(echo "$CHANGED_FILES" | grep '^_modules/' || true)
          if [ -n "$MODULES_CHANGED" ]; then
            echo "_modules changed, planning all environments."
            JSON_MATRIX="${{ needs.find_dirs.outputs.matrix }}"
            echo "Valid directories (_modules changed): $(echo "$JSON_MATRIX" | jq -r '.[].directoryPath')"
            echo "matrix=$JSON_MATRIX" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          CHANGED_DIRS=$(echo "$CHANGED_FILES" | awk -F'/' 'NF >= 1 {print $1}' | sort | uniq | grep -v '^_modules' || true)
          echo "Changed directories: $CHANGED_DIRS"
          if [ -z "$CHANGED_DIRS" ]; then
            echo "No changes detected."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          VALID_DIRS=""
          JSON_MATRIX="["
          for dir in $CHANGED_DIRS; do
            if [ -d "$dir" ] && ls "$dir"/*.tf >/dev/null 2>&1; then
              VALID_DIRS="$VALID_DIRS $dir"
              JSON_MATRIX+="{\"directoryPath\":\"$dir\"},"
            fi
          done
          JSON_MATRIX=${JSON_MATRIX%,}
          JSON_MATRIX+="]"
          if [ -z "$VALID_DIRS" ]; then
            echo "No valid directories changed."
            echo "matrix=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Valid directories (env changes): $VALID_DIRS"
          echo "Matrix JSON: $JSON_MATRIX"
          echo "matrix=$JSON_MATRIX" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
        shell: bash

  tf_plan:
    runs-on: ubuntu-latest
    needs: [find_dirs, check_changes]
    if: ${{ needs.check_changes.outputs.has_changes == 'true' }}
    strategy:
      matrix:
        directoryPath: ${{ fromJson(needs.check_changes.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug matrix input
        run: |
          echo "Matrix input: ${{ toJson(matrix) }}"
          echo "Current directoryPath: ${{ matrix.directoryPath }}"
        shell: bash

      - name: Debug directory contents
        run: |
          echo "Processing directory: ${{ matrix.directoryPath }}"
          if [ -d "${{ matrix.directoryPath }}" ]; then
            ls -la "${{ matrix.directoryPath }}"
          else
            echo "Directory ${{ matrix.directoryPath }} does not exist"
            exit 1
          fi
        shell: bash

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.directoryPath }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.directoryPath }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ matrix.directoryPath }}