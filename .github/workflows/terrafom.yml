name: plan-apply pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: tf_plan
  condition: ne(variables.isMain, 'True')
  jobs:
  - job: check_changes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - script: |
          CHANGED_DIRS=$(git diff origin/main HEAD --name-only -- '*.tf' | grep -v '^_modules' | awk -F'/' 'NF > 1 {print $1}' | sort | uniq)
          JSON_MATRIX="{"
          for dir in $CHANGED_DIRS; do
            JSON_MATRIX+="\"$dir\":{\"directoryPath\":\"$dir\"},"
          done
          JSON_MATRIX=${JSON_MATRIX%,}
          JSON_MATRIX+="}"
          echo "Changed directories: $CHANGED_DIRS"
          echo "Matrix JSON: $JSON_MATRIX"
          echo "##vso[task.setvariable variable=matrix;isOutput=true]$JSON_MATRIX"
        displayName: 'Fetch latest Changes'
        name: detect_changes

  - job: tf_plan
    runs-on: ubuntu-latest
    dependsOn: check_changes
    condition: ne(dependencies.check_changes.outputs['detect_changes.matrix'], '')
    steps:
      - task: TerraformInstaller@1
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'

      - task: AzureCLI@2
        name: tf_init_validate_plan
        displayName: Terraform init Validate & Plan
        inputs:
          azureSubscription: |
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          script: |
            terraform init
            terraform validate
            terraform plan
          workingDirectory: '$(System.DefaultWorkingDirectory)/${{ directoryPath }}'
          visibleAzLogin: false
 
          

      - name: Inspect repository contents
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing all files in workspace:"
          ls -la
          echo "Listing _modules/ recursively:"
          if [ -d "_modules/" ]; then
            ls -R _modules
          else
            echo "Directory _modules/ does not exist in the repository"
          fi
          echo "Listing tracked files in repository:"
          git ls-files _modules || echo "No files found under terraform/_modules in git"

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Loop through each module and plan
        run: |
          if [ ! -d "_modules" ]; then
            echo "Error: _modules directory not found in the repository"
            exit 1
          fi
          found_tf_files=false
          for dir in $(find _modules -type f -name "*.tf" -exec dirname {} \; | sort -u); do
            found_tf_files=true
            if [ -d "$dir" ]; then
              echo "Running Terraform in $dir"
              cd "$dir"
              terraform init
              terraform validate
              terraform plan
              cd - > /dev/null
            else
              echo "Directory $dir does not exist, skipping"
            fi
          done
          if [ "$found_tf_files" = false ]; then
            echo "No .tf files found in _modules/"
            exit 1
          fi