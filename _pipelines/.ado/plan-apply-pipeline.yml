name: plan-apply-pipeline

trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'  # You can adjust this to your preferred image

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
- stage: tf_plan
  displayName: Terraform Plan
  condition: ne(variables['isMain'], 'True')
  jobs:
  - job: check_changes
    displayName: Detect Terraform Changes
    steps:
      - checkout: self
        fetchDepth: 0
      
      - script: |
          echo "Detecting changed directories..."
          CHANGED_DIRS=$(git diff origin/main HEAD --name-only -- '*.tf' | grep -v '^_modules/' | awk -F'/' 'NF > 1 {print $1}' | sort | uniq)
          JSON_MATRIX="{"
          for dir in $CHANGED_DIRS; do
            JSON_MATRIX+="\"$dir\":{\"directoryPath\":\"$dir\"},"
          done
          JSON_MATRIX=${JSON_MATRIX%,}
          JSON_MATRIX+="}"
          echo "Changed directories: $CHANGED_DIRS"
          echo "Matrix JSON: $JSON_MATRIX"
          echo "##vso[task.setvariable variable=matrix;isOutput=true]$JSON_MATRIX"
        displayName: 'Fetch Changed Terraform Directories'
    name: detect_changes

  - job: tf_plan
    dependsOn: check_changes
    condition: ne(dependencies.check_changes.outputs['detect_changes.matrix'], '{}')
    strategy:
      matrix: $[dependencies.check_changes.outputs['detect_changes.matrix']]
    steps:
      - task: TerraformInstaller@1
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'

      - task: AzureCLI@2
        name: tf_init_validate_plan
        displayName: Terraform Init, Validate & Plan
        inputs:
          azureSubscription: ''  # Replace with your actual service connection
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $env:ARM_CLIENT_ID = $env:servicePrincipalId
            $env:ARM_CLIENT_SECRET = $env:servicePrincipalKey
            $env:ARM_TENANT_ID = $env:tenantId
            terraform init
            terraform validate
            terraform plan
        env:
          servicePrincipalId: $(ARM_CLIENT_ID)
          servicePrincipalKey: $(ARM_CLIENT_SECRET)
          tenantId: $(ARM_TENANT_ID)
        workingDirectory: '$(System.DefaultWorkingDirectory)/$(directoryPath)'
        addSpnToEnvironment: true
        enableAzPSSession: true
        azurePowerShellVersion: 'LatestVersion'

- stage: tf_apply  # This is a placeholder stage, but it will not apply anything.
  displayName: Terraform Apply (Disabled)
  condition: eq(variables['isMain'], 'True')
  jobs:
    - job: check_changes_apply
      displayName: Detect Changes Again (No Apply)
      steps:
        - checkout: self
          fetchDepth: 0
        
        - script: |
            echo "Rechecking changes for Apply stage (no apply will be done)..."
            CHANGED_DIRS=$(git diff HEAD~ HEAD --name-only -- '*.tf' | grep -v '^_modules/' | awk -F'/' 'NF > 1 {print $1}' | sort | uniq)
            JSON_MATRIX="{"
            for dir in $CHANGED_DIRS; do
              JSON_MATRIX+="\"$dir\":{\"directoryPath\":\"$dir\"},"
            done
            JSON_MATRIX=${JSON_MATRIX%,}
            JSON_MATRIX+="}"
            echo "Changed directories: $CHANGED_DIRS"
            echo "Matrix JSON: $JSON_MATRIX"
            echo "##vso[task.setvariable variable=matrix;isOutput=true]$JSON_MATRIX"
          displayName: 'Fetch Changed Terraform Directories for Apply'
